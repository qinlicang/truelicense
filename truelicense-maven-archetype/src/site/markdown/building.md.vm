##
## Copyright (C) 2005-2015 Schlichtherle IT Services.
## All rights reserved. Use is subject to license terms.
##
#parse("_include.vm")
#title("Building Your Project")

This page shows you how to build your project.

$h3 Building Action

Please clean and install the project into your local Maven repository
using the following command:

    ${dollar} mvn clean install -Pintegration-test
    [...]
    [INFO] BUILD SUCCESS
    [...]

The parameter `-Pintegration-test` triggers running the integration tests
before installing the build artifacts into the local Maven repository.

If you get an error message instead of `BUILD SUCCESS`, then please follow it
up.
If you get lost, please review or contact the
[users mailing list](mail-lists.html) for help.

$h3 Build Artifacts

Building the sample project produces the following artifacts - listed in
alphabetic order:

`${dollar}{artifactId}-keygen/src/main/resources/${dollar}{privateKeyStoreFile}`
:   The private key store - see below.

`${dollar}{artifactId}-keygen/target/${dollar}{artifactId}-keygen-${dollar}{version}-standalone.jar`
:   This is the standalone <abbr title="Java ARchive">JAR</abbr> for the Key 
    Generator module.
    It is generated by bundling the regular JAR with all its dependency JARs.
    This is convenient to use on the command line because you don't have to
    manually add all JARs to the class path.
    You must not distribute this JAR to users.

`${dollar}{artifactId}-keygen/target/${dollar}{artifactId}-keygen-${dollar}{version}.jar`
:   This is the regular JAR for the Key Generator module.
    This JAR has dependencies on other JARs as specified in the Maven 
    <a href="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html"><abbr title="Project Object Model">POM</abbr></a>
    for this module.
    You must not distribute this JAR to users.

`${dollar}{artifactId}-keymgr/src/main/resources/${dollar}{ftpKeyStoreFile}`
:   The <abbr title="Free Trial Period">FTP</abbr> key store - see below.

`${dollar}{artifactId}-keymgr/src/main/resources/${dollar}{publicKeyStoreFile}`
:   The public key store - see below.

`${dollar}{artifactId}-keymgr/target/${dollar}{artifactId}-keymgr-${dollar}{version}-guarded.jar`
:   This is the obfuscated standalone JAR for the Key Manager module.
    It is generated from the standalone JAR by obfuscating its byte code.
    This improves security by making attacks on the byte code pretty hard.
    This is the only JAR which is intended for distribution to users as is.

`${dollar}{artifactId}-keymgr/target/${dollar}{artifactId}-keymgr-${dollar}{version}-standalone.jar`
:   This is the standalone JAR for the Key Manager module.
    It is generated by bundling the regular JAR with all its dependency JARs.
    This is convenient to use on the command line because you just have to add
    this JAR to the class path.
    You should not distribute this JAR to users without additional obfuscation.

`${dollar}{artifactId}-keymgr/target/${dollar}{artifactId}-keymgr-${dollar}{version}.jar`
:   This is the regular JAR for the Key Manager module.
    This JAR has dependencies on other JARs as specified in the Maven POM
    for this module.
    You should not distribute this JAR to users without additional obfuscation.

`${dollar}{artifactId}-keymgrsrv/target/${dollar}{artifactId}-keymgrsrv-${dollar}{version}.jar`
:   This is the regular JAR for the Key Manager Service module.
    This JAR has dependencies on other JARs as specified in the Maven POM
    for this module.
    You should not distribute this JAR to users.

$h4 Generated Key Stores

When you run the build for the very first time, the following key store files
are automatically generated:

* `${dollar}{artifactId}-keygen/src/main/resources/${dollar}{privateKeyStoreFile}`
* `${dollar}{artifactId}-keymgr/src/main/resources/${dollar}{ftpKeyStoreFile}`
* `${dollar}{artifactId}-keymgr/src/main/resources/${dollar}{publicKeyStoreFile}`

You can use the following command to inspect the entries in the generated key
store files:

    ${dollar} keytool -list -v -protected \
        -keystore ${dollar}{keyStorePath} \
        -storetype ${dollar}{keyStoreType}

... where you need to replace `${dollar}{keyStorePath}` with the respective
path of the key store file and `${dollar}{keyStoreType}` with the value of
the equal named property in the parent POM file `pom.xml`, i.e. 
<abbr title="Java Cryptography Extension Key Store">`JCEKS`</abbr> or
<abbr title="Java Key Store">`JKS`</abbr>.

The output of this command will show you a lot of meta data information:
The distinguished name of the key pair owner and issuer, the validity
period of the certificate etc.
However, TrueLicense only reads the key, its digital signature algorithm and
its signature - all other meta data is ignored.

---

#nav("Setting Up a VCS" "setting-up-vcs.html" "Using the CLI" "using-cli.html")
